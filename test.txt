#define _CRT_SECURE_NO_WARNINGS
#pragma comment(linker, "/stack:16777216")
#include <string>
#include <vector>
#include <map>
#include <list>
#include <iterator>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
#include <stack>
#include <deque>
#include <cmath>
#include <memory.h>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <algorithm>
#include <utility>
#include <time.h>
#include <complex>
using namespace std;

#define FOR(i, a, b) for(int i=(a);i<(b);i++)
#define RFOR(i, b, a) for(int i=(b)-1;i>=(a);--i)
#define FILL(A,value) memset(A,value,sizeof(A))

#define ALL(V) V.begin(), V.end()
#define SZ(V) (int)V.size()
#define PB push_back
#define MP make_pair
#define Pi 3.14159265358979
#define x0 ikjnrmthklmnt
#define y0 lkrjhkltr
#define y1 ewrgrg

typedef long long Int;
typedef unsigned long long UInt;
typedef vector<int> VI;
typedef pair<int, int> PII;
typedef pair<Int, Int> PLL;
typedef pair<double, double> PDD;
typedef complex<double> base;

const int INF = 1000000000;
const int BASE = 1000000007;
const int MAX = 100007;
const int MAX2 = 7777;
const int MAXE = 100000;
const int ADD = 1000000;
const int MOD = 1000000007;
const int CNT = 800;

int main()
{
    //freopen("in.txt", "r", stdin);
    //freopen("distance.in",  "r", stdin);
    //freopen("distance.out", "w", stdout);
    //freopen("out.txt" , "w" , stdout);


	int t;
	cin >> t;
	int sum = 0;
	FOR(tt,0,t)
	{
		int N , L;

		cin >> N >> L;
		sum += N;
		assert(L <= 1000000);
		assert(L >= 1);
		vector<PII> A;
		FOR(i,0,N)
		{
			int l , r;
			cin >> l >> r;
			assert(l >= 1 && r >= l && r <= 1000000);
			A.push_back(MP(l, r));
		}

		sort(ALL(A));

		bool isPossible = false;

		FOR(i,0,N)
		{
			int r = A[i].first;
			bool ok = 1;
			FOR(j,0,N)
			{
				if (A[j].first >= A[i].first && A[j].second <= A[i].first + L)
				{
					if (A[j].first > r)
					{
						ok = 0;
					}
					else
					{
						r = max(r , A[j].second);
					}
				}
			}
			if (r != A[i].first + L)
			{
				ok = 0;
			}
			isPossible |= ok;
		}

		if (isPossible) cout << "Yes" << endl;
		else cout << "No" << endl;

	}
	assert(sum >= 1 && sum <= 2000);

    return 0;
}